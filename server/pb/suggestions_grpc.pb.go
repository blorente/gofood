// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.9
// source: suggestions.proto

package suggestions

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MealSuggesterClient is the client API for MealSuggester service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MealSuggesterClient interface {
	SuggestMeal(ctx context.Context, in *SuggestMealRequest, opts ...grpc.CallOption) (*SuggestMealResponse, error)
	GetMealFilters(ctx context.Context, in *GetMealFiltersRequest, opts ...grpc.CallOption) (*GetMealFiltersResponse, error)
}

type mealSuggesterClient struct {
	cc grpc.ClientConnInterface
}

func NewMealSuggesterClient(cc grpc.ClientConnInterface) MealSuggesterClient {
	return &mealSuggesterClient{cc}
}

func (c *mealSuggesterClient) SuggestMeal(ctx context.Context, in *SuggestMealRequest, opts ...grpc.CallOption) (*SuggestMealResponse, error) {
	out := new(SuggestMealResponse)
	err := c.cc.Invoke(ctx, "/MealSuggester/SuggestMeal", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mealSuggesterClient) GetMealFilters(ctx context.Context, in *GetMealFiltersRequest, opts ...grpc.CallOption) (*GetMealFiltersResponse, error) {
	out := new(GetMealFiltersResponse)
	err := c.cc.Invoke(ctx, "/MealSuggester/GetMealFilters", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MealSuggesterServer is the server API for MealSuggester service.
// All implementations must embed UnimplementedMealSuggesterServer
// for forward compatibility
type MealSuggesterServer interface {
	SuggestMeal(context.Context, *SuggestMealRequest) (*SuggestMealResponse, error)
	GetMealFilters(context.Context, *GetMealFiltersRequest) (*GetMealFiltersResponse, error)
	mustEmbedUnimplementedMealSuggesterServer()
}

// UnimplementedMealSuggesterServer must be embedded to have forward compatible implementations.
type UnimplementedMealSuggesterServer struct {
}

func (UnimplementedMealSuggesterServer) SuggestMeal(context.Context, *SuggestMealRequest) (*SuggestMealResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SuggestMeal not implemented")
}
func (UnimplementedMealSuggesterServer) GetMealFilters(context.Context, *GetMealFiltersRequest) (*GetMealFiltersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMealFilters not implemented")
}
func (UnimplementedMealSuggesterServer) mustEmbedUnimplementedMealSuggesterServer() {}

// UnsafeMealSuggesterServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MealSuggesterServer will
// result in compilation errors.
type UnsafeMealSuggesterServer interface {
	mustEmbedUnimplementedMealSuggesterServer()
}

func RegisterMealSuggesterServer(s grpc.ServiceRegistrar, srv MealSuggesterServer) {
	s.RegisterService(&MealSuggester_ServiceDesc, srv)
}

func _MealSuggester_SuggestMeal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SuggestMealRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MealSuggesterServer).SuggestMeal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/MealSuggester/SuggestMeal",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MealSuggesterServer).SuggestMeal(ctx, req.(*SuggestMealRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MealSuggester_GetMealFilters_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMealFiltersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MealSuggesterServer).GetMealFilters(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/MealSuggester/GetMealFilters",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MealSuggesterServer).GetMealFilters(ctx, req.(*GetMealFiltersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// MealSuggester_ServiceDesc is the grpc.ServiceDesc for MealSuggester service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MealSuggester_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "MealSuggester",
	HandlerType: (*MealSuggesterServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SuggestMeal",
			Handler:    _MealSuggester_SuggestMeal_Handler,
		},
		{
			MethodName: "GetMealFilters",
			Handler:    _MealSuggester_GetMealFilters_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "suggestions.proto",
}
